{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import axios, { AxiosError } from 'axios';\n// import EditMessage from \"./editMessage\"\n// import DeleteMessage from './deleteMessage';\n// import CreateMessage from './CreateMessage';\n// // import {setChannelId} from './GetUserChannels3';\n// import { useParams } from 'react-router-dom';\n// import { setChannelId } from './GetUserChannels3';\n\n// interface Message {\n//     message_id: string;\n//     channel_id: number;\n//     user_id: string;\n//     content: string;\n//     edited_at: string | null;\n// }\n\n// interface Props {\n//     channelId: any;\n// }\n\n// const MessageList: React.FC<Props> = ({channelId}) => {\n//     const [messages, setMessages] = useState<Message[]>([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState<string>('');\n\n//     const HandleGetMessages = async (channelId: number) => {\n//         try {\n//             setLoading(true);\n//             const response = await axios.get(`http://localhost:8081/messages?channel_id=${channelId}`);\n//             setMessages(response.data);\n//             setLoading(false);\n//             setError('');\n//         } catch (error) {\n//             setLoading(false);\n//             if (axios.isAxiosError(error)) {\n//                 const axiosError = error as AxiosError;\n//                 if (axiosError.response) {\n//                     setError((axiosError.response.data as { error: string }).error);\n//                 } else {\n//                     setError('Failed to fetch messages');\n//                 }\n//             } else {\n//                 setError('Failed to fetch messages');\n//             }\n//         }\n//     };\n\n//     useEffect(() => {\n//         HandleGetMessages(channelId);\n//     }, [channelId]);\n\n//     if (loading) {\n//         return <div>Loading...</div>;\n//     }\n\n//     if (error) {\n//         return <div>Error: {error}</div>;\n//     }\n\n//     return (\n//         <div>\n//             {messages.map((message) => (\n//                 <div key={message.message_id}>\n//                     <p>Message ID: {message.message_id}</p>\n//                     <p>Channel ID: {message.channel_id}</p>\n//                     <p>User ID: {message.user_id}</p>\n//                     <p>Content: {message.content}</p>\n//                     <p>Edited At: {message.edited_at || 'Not edited'}</p>\n//                     <EditMessage\n//                         //messageId={message.message_id}\n//                         onEditSuccess={() => HandleGetMessages(channelId)}\n//                     />\n//                     <DeleteMessage messageId={message.message_id} />\n//                 </div>   \n//             ))}\n//             <CreateMessage />\n//         </div>\n//     );\n// };\n\n// export default MessageList;","map":{"version":3,"names":[],"sources":["/Users/Owner/Desktop/hackathon_muta/hackathon2/my-app-ts/src/GetMessages.tsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios, { AxiosError } from 'axios';\n// import EditMessage from \"./editMessage\"\n// import DeleteMessage from './deleteMessage';\n// import CreateMessage from './CreateMessage';\n// // import {setChannelId} from './GetUserChannels3';\n// import { useParams } from 'react-router-dom';\n// import { setChannelId } from './GetUserChannels3';\n\n\n\n// interface Message {\n//     message_id: string;\n//     channel_id: number;\n//     user_id: string;\n//     content: string;\n//     edited_at: string | null;\n// }\n\n// interface Props {\n//     channelId: any;\n// }\n\n\n// const MessageList: React.FC<Props> = ({channelId}) => {\n//     const [messages, setMessages] = useState<Message[]>([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState<string>('');\n\n//     const HandleGetMessages = async (channelId: number) => {\n//         try {\n//             setLoading(true);\n//             const response = await axios.get(`http://localhost:8081/messages?channel_id=${channelId}`);\n//             setMessages(response.data);\n//             setLoading(false);\n//             setError('');\n//         } catch (error) {\n//             setLoading(false);\n//             if (axios.isAxiosError(error)) {\n//                 const axiosError = error as AxiosError;\n//                 if (axiosError.response) {\n//                     setError((axiosError.response.data as { error: string }).error);\n//                 } else {\n//                     setError('Failed to fetch messages');\n//                 }\n//             } else {\n//                 setError('Failed to fetch messages');\n//             }\n//         }\n//     };\n\n//     useEffect(() => {\n//         HandleGetMessages(channelId);\n//     }, [channelId]);\n\n//     if (loading) {\n//         return <div>Loading...</div>;\n//     }\n\n//     if (error) {\n//         return <div>Error: {error}</div>;\n//     }\n\n//     return (\n//         <div>\n//             {messages.map((message) => (\n//                 <div key={message.message_id}>\n//                     <p>Message ID: {message.message_id}</p>\n//                     <p>Channel ID: {message.channel_id}</p>\n//                     <p>User ID: {message.user_id}</p>\n//                     <p>Content: {message.content}</p>\n//                     <p>Edited At: {message.edited_at || 'Not edited'}</p>\n//                     <EditMessage\n//                         //messageId={message.message_id}\n//                         onEditSuccess={() => HandleGetMessages(channelId)}\n//                     />\n//                     <DeleteMessage messageId={message.message_id} />\n//                 </div>   \n//             ))}\n//             <CreateMessage />\n//         </div>\n//     );\n// };\n\n// export default MessageList;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}