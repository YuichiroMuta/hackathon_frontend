{"ast":null,"code":"var _jsxFileName = \"/Users/Owner/Desktop/hackathon_muta/hackathon2/my-app-ts/src/GetMessages.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport EditMessage from \"./editMessage\";\nimport DeleteMessage from './deleteMessage';\nimport CreateMessage from './CreateMessage';\n// import {setChannelId} from './GetUserChannels3';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst channelID = useParams();\nconst MessageList = _ref => {\n  _s();\n  let {\n    channelId\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const HandleGetMessages = async channelId => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`/messages?channel_id=${channelId}`);\n      setMessages(response.data);\n      setLoading(false);\n      setError('');\n    } catch (error) {\n      setLoading(false);\n      if (axios.isAxiosError(error)) {\n        const axiosError = error;\n        if (axiosError.response) {\n          setError(axiosError.response.data.error);\n        } else {\n          setError('Failed to fetch messages');\n        }\n      } else {\n        setError('Failed to fetch messages');\n      }\n    }\n  };\n  useEffect(() => {\n    HandleGetMessages(channelId);\n  }, [channelId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Message ID: \", message.message_id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Channel ID: \", message.channel_id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"User ID: \", message.user_id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Content: \", message.content]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edited At: \", message.edited_at || 'Not edited']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(EditMessage\n      //messageId={message.message_id}\n      , {\n        onEditSuccess: () => HandleGetMessages(channelId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(DeleteMessage, {\n        messageId: message.message_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this)]\n    }, message.message_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(CreateMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageList, \"9fXYnnLol0BPoYLrwWFeq8HynnU=\");\n_c = MessageList;\nexport default MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useState","axios","EditMessage","DeleteMessage","CreateMessage","useParams","jsxDEV","_jsxDEV","channelID","MessageList","_ref","_s","channelId","messages","setMessages","loading","setLoading","error","setError","HandleGetMessages","response","get","data","isAxiosError","axiosError","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","message_id","channel_id","user_id","content","edited_at","onEditSuccess","messageId","_c","$RefreshReg$"],"sources":["/Users/Owner/Desktop/hackathon_muta/hackathon2/my-app-ts/src/GetMessages.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios, { AxiosError } from 'axios';\nimport EditMessage from \"./editMessage\"\nimport DeleteMessage from './deleteMessage';\nimport CreateMessage from './CreateMessage';\n// import {setChannelId} from './GetUserChannels3';\nimport { useParams } from 'react-router-dom';\n\nconst channelID = useParams();\n\n\n\ninterface Message {\n    message_id: string;\n    channel_id: number;\n    user_id: string;\n    content: string;\n    edited_at: string | null;\n}\n\ninterface Props {\n    channelId: number;\n}\n\n\nconst MessageList: React.FC<Props> = ({channelId}) => {\n    const [messages, setMessages] = useState<Message[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string>('');\n\n    const HandleGetMessages = async (channelId: number) => {\n        try {\n            setLoading(true);\n            const response = await axios.get(`/messages?channel_id=${channelId}`);\n            setMessages(response.data);\n            setLoading(false);\n            setError('');\n        } catch (error) {\n            setLoading(false);\n            if (axios.isAxiosError(error)) {\n                const axiosError = error as AxiosError;\n                if (axiosError.response) {\n                    setError((axiosError.response.data as { error: string }).error);\n                } else {\n                    setError('Failed to fetch messages');\n                }\n            } else {\n                setError('Failed to fetch messages');\n            }\n        }\n    };\n\n    useEffect(() => {\n        HandleGetMessages(channelId);\n    }, [channelId]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    return (\n        <div>\n            {messages.map((message) => (\n                <div key={message.message_id}>\n                    <p>Message ID: {message.message_id}</p>\n                    <p>Channel ID: {message.channel_id}</p>\n                    <p>User ID: {message.user_id}</p>\n                    <p>Content: {message.content}</p>\n                    <p>Edited At: {message.edited_at || 'Not edited'}</p>\n                    <EditMessage\n                        //messageId={message.message_id}\n                        onEditSuccess={() => HandleGetMessages(channelId)}\n                    />\n                    <DeleteMessage messageId={message.message_id} />\n                </div>   \n            ))}\n            <CreateMessage />\n        </div>\n    );\n};\n\nexport default MessageList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}